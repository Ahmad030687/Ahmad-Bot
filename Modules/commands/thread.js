this.config = {    
  name: "thread",
  version: "1.0.0",
  author: {
    name: "NTKhang", 
    contacts: ""
  },
  cooldowns: 5,
  role: 2,
  shortDescription: "Qu·∫£n l√Ω c√°c nh√≥m chat",
  longDescription: "Qu·∫£n l√Ω c√°c nh√≥m chat trong h·ªá th·ªëng bot",
  category: "owner",
  guide: "{prefix}thread [find | -f | search | -s] <t√™n c·∫ßn t√¨m>: t√¨m ki·∫øm nh√≥m chat trong d·ªØ li·ªáu bot b·∫±ng t√™n"
       + "\n"
       + "\n{prefix}thread [ban | -b] [<id> | ƒë·ªÉ tr·ªëng] <reason>: d√πng ƒë·ªÉ c·∫•m nh√≥m mang id <id> ho·∫∑c nh√≥m hi·ªán t·∫°i s·ª≠ d·ª•ng bot"
       + "\nV√≠ d·ª•:"
       + "\n{prefix}thread ban 3950898668362484 spam bot"
       + "\n{prefix}thread ban spam qu√° nhi·ªÅu"
       + "\n"
       + "\n{prefix}thread unban [<id> | ƒë·ªÉ tr·ªëng] ƒë·ªÉ b·ªè c·∫•m nh√≥m mang id <id>"
       + "\nho·∫∑c nh√≥m hi·ªán t·∫°i"
};

module.exports = {
  config: this.config,
  start: async function({ api, args, threadsData, message, client, event }) {
    const moment = require("moment-timezone");
    const type = args[0];
    if (["find", "search", "-f", "-s"].includes(type)) {
      var allThread = await threadsData.getAll(["name"]);
      var arrayreturn = [];
      var msg = "";
      var length = 0;
      const keyword = args.slice(1).join(" ");
      for (let i in allThread) {
        if (allThread[i].name.toLowerCase().includes(keyword.toLowerCase())) {
          length++;
          msg += `\n‚ï≠Name: ${allThread[i].name}\n‚ï∞ID: ${i}`;
        }
      };
      message.reply(length == 0 ? `‚ùåKh√¥ng c√≥ k·∫øt qu·∫£ t√¨m ki·∫øm n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a ${keyword}` : `üîéC√≥ ${length} k·∫øt qu·∫£ ph√π h·ª£p cho t·ª´ kh√≥a "${keyword}":\n${msg}`);
    }
    else if (["ban", "-b"].includes(type)) {
      var id, reason;
      if (client.allThread.includes(args[1])) {
        id = args[1];
        reason = args.slice(2).join(" ");
      }
      else {
        id = event.threadID;
        reason = args.slice(1).join(" ");
      };
      if (!id || !reason) return message.SyntaxError();
      reason = reason.replace(/\s+/g, ' ');
      if (!client.allThread.includes(id)) return message.reply(`Nh√≥m mang id ${id} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu bot`);
      const threadData = (await threadsData.getData(id));
      const name = threadData.name;
      
      const { banned } = threadData;
      banned.usebot = {
        status: true,
    	  reason,
    	  date: moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY HH:mm:ss")
      };
      await threadsData.setData(id, { banned }, (err) => {
        if (err) return message.reply(`ƒê√£ x·∫£y ra l·ªói ${err.name}: ${err.message}`);
        else return message.reply(`ƒê√£ c·∫•m nh√≥m mang id ${id} | ${name} s·ª≠ d·ª•ng bot v·ªõi l√Ω do: ${reason}`);
      });
    }
    else if (["unban", "-u"].includes(type)) {
      var id;
      if (client.allThread.includes(args[1])) {
        id = args[1];
      }
      else {
        id = event.threadID;
      };
      if (!id) return message.SyntaxError(require(module.filename).name);
      if (!client.allThread.includes(id)) return message.reply(`Nh√≥m mang id ${id} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu bot`);
      const threadData = await threadsData.getData(id);
      const name = threadData.name;
      const { banned } = threadData;
      banned.usebot = {
        status: false,
    	  reason: null
      };
      await threadsData.setData(id, { banned }, (err, data) => {
        if (err) return message.reply(`ƒê√£ x·∫£y ra l·ªói ${err.name}: ${err.message}`);
        else message.reply(`ƒê√£ b·ªè c·∫•m nh√≥m mang id ${id} | ${name}, hi·ªán t·∫°i nh√≥m n√†y c√≥ th·ªÉ s·ª≠ d·ª•ng bot`);
      });
    }
    else return message.SyntaxError();
  }
};